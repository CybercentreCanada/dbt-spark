trigger:
  branches:
    include:
      - cccs

pool: cauldron-vmss

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build_and_Publish_Python_Artifact
  displayName: Build, package and publish python artifacts.
  jobs:
  - job: BuildPythonArtifact
    displayName: Build and package python artifacts.
    strategy:
      matrix:
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --user --upgrade pip
        python -m pip install --upgrade setuptools wheel twine check-wheel-contents
        python -m pip --version
      displayName: 'Install python dependencies'
    - task: ShellScript@2
      inputs:
        scriptPath: ./scripts/build-dist.sh
      displayName: 'Build distributions'
    - script: |
        ls -lh dist/
      displayName: 'Show distributions'
    - script: |
        twine check dist/*
      displayName: 'Check distribution descriptions'
    - script: |
        check-wheel-contents dist/*.whl --ignore W007,W008
      displayName: 'Check wheel contents'
    - task: CopyFiles@2
      inputs:
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Stage build artifact to publish'
    - task: PublishBuildArtifacts@1
      displayName: Publish build artifacts
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/dist'
        artifactName: 'dist'
        publishLocation: 'Container'
  - job: PublishArtifactToNexus
    dependsOn: BuildPythonArtifact
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        downloadPath: '$(Pipeline.Workspace)'
      displayName: 'Download build artifact.'
    - task: TwineAuthenticate@1
      inputs:
        pythonUploadServiceConnection: nexus-u-pypi-cccs
    - script: |
        pip install twine
        python -m twine upload --skip-existing -r "nexus-u-pypi-cccs" --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/dist/* --verbose
      displayName: 'Publish artifact to PyPI.'
